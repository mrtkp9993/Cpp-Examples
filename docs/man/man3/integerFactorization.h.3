.TH "src/integerFactorization.h" 3 "Sun Oct 13 2019" "Cpp Examples" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/integerFactorization.h \- Implements Pollard rho algorithm\&.  

.SH SYNOPSIS
.br
.PP
\fC#include <cmath>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "template<typename T > T \fBg\fP (T x, T n)"
.br
.RI "Helper function for generate a pseudo-random sequence\&. "
.ti -1c
.RI "template<typename T > T \fBgcd\fP (T x, T y)"
.br
.RI "Greatest common divisor\&. "
.ti -1c
.RI "template<typename T > T \fBrho\fP (T n)"
.br
.RI "Pollard rho algorithm\&. "
.in -1c
.SH "Detailed Description"
.PP 
Implements Pollard rho algorithm\&. 

Pollard's rho algorithm is an algorithm for integer factorization\&. It was invented by John Pollard in 1975\&.[1] It uses only a small amount of space, and its expected running time is proportional to the square root of the size of the smallest prime factor of the composite number being factorized\&.
.PP
\fBAuthor:\fP
.RS 4
Murat Koptur mkoptur3@gmail.com
.RE
.PP
Last updated: 26/Jan/2019\&. 
.SH "Function Documentation"
.PP 
.SS "template<typename T > T g (T x, T n)"

.PP
Helper function for generate a pseudo-random sequence\&. 
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIT\fP A type\&. 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIx\fP Input\&. 
.br
\fIn\fP The number which will be factorized\&.
.RE
.PP
\fBReturns:\fP
.RS 4
Pseudo-random number\&. 
.RE
.PP

.SS "template<typename T > T gcd (T x, T y)"

.PP
Greatest common divisor\&. 
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIT\fP A type\&. 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIx\fP Number 1\&. 
.br
\fIy\fP Number 2\&.
.RE
.PP
\fBReturns:\fP
.RS 4
GCD of x and y\&. 
.RE
.PP

.SS "template<typename T > T rho (T n)"

.PP
Pollard rho algorithm\&. 
.PP
\fBTemplate Parameters:\fP
.RS 4
\fIT\fP A type\&. 
.RE
.PP
\fBParameters:\fP
.RS 4
\fIn\fP The number which will be factorized\&.
.RE
.PP
\fBReturns:\fP
.RS 4
A non-trivial factor of n\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Cpp Examples from the source code\&.
