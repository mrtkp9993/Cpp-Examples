.TH "src/statistics.h" 3 "Sun Oct 13 2019" "Cpp Examples" \" -*- nroff -*-
.ad l
.nh
.SH NAME
src/statistics.h \- Statistics related functions\&.  

.SH SYNOPSIS
.br
.PP
\fC#include <cmath>\fP
.br
\fC#include <cstdlib>\fP
.br
\fC#include <numeric>\fP
.br
\fC#include <random>\fP
.br
\fC#include <vector>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "template<typename T  = long double> T \fBrunif\fP (const T &a=0, const T &b=1)"
.br
.RI "Uniform number generator\&. "
.ti -1c
.RI "template<typename T  = long double> T \fBrnorm\fP (const T &mean=0, const T &sd=1)"
.br
.RI "Normal number generator with Box–Muller transform\&. "
.ti -1c
.RI "template<typename T  = long double> T \fBpchisq\fP (const T &stat, const unsigned int &k)"
.br
.RI "Chi-Squared distribution\&. "
.ti -1c
.RI "bool \fBjb_test\fP (const std::vector< long double > &x)"
.br
.RI "Jarque–Bera test\&. "
.in -1c
.SH "Detailed Description"
.PP 
Statistics related functions\&. 


.PP
\fBAuthor:\fP
.RS 4
Murat Koptur mkoptur3@gmail.com
.RE
.PP
Last updated: 22/Jan/2019\&. 
.SH "Function Documentation"
.PP 
.SS "bool jb_test (const std::vector< long double > & x)"

.PP
Jarque–Bera test\&. Jarque–Bera test is a goodness-of-fit test of whether sample data have the skewness and kurtosis matching a normal distribution\&.
.PP
\fBParameters:\fP
.RS 4
\fIx\fP Vector of numbers\&.
.RE
.PP
\fBReturns:\fP
.RS 4
A boolean which indicates that x is normally distributed or not\&. 
.RE
.PP

.SS "template<typename T  = long double> T pchisq (const T & stat, const unsigned int & k)"

.PP
Chi-Squared distribution\&. 
.PP
\fBParameters:\fP
.RS 4
\fIstat\fP Test statistic\&. 
.br
\fIk\fP Degrees of freedom\&.
.RE
.PP
\fBReturns:\fP
.RS 4
A probability\&. 
.RE
.PP

.SS "template<typename T  = long double> T rnorm (const T & mean = \fC0\fP, const T & sd = \fC1\fP)"

.PP
Normal number generator with Box–Muller transform\&. Box–Muller transform is a pseudo-random number sampling method for generating pairs of independent, standard, normally distributed (zero expectation, unit variance) random numbers, given a source of uniformly distributed random numbers\&.
.PP
\fBParameters:\fP
.RS 4
\fImean\fP Mean of distribution\&. 
.br
\fIsd\fP Standart deviation of distribution\&.
.RE
.PP
\fBReturns:\fP
.RS 4
A random number\&. 
.RE
.PP

.SS "template<typename T  = long double> T runif (const T & a = \fC0\fP, const T & b = \fC1\fP)"

.PP
Uniform number generator\&. 
.PP
\fBParameters:\fP
.RS 4
\fIa\fP Lower bound\&. 
.br
\fIb\fP Upper bound\&.
.RE
.PP
\fBReturns:\fP
.RS 4
A random number between [a, b]\&. 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for Cpp Examples from the source code\&.
